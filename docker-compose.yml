version: "3"
services:
  autoheal:
    restart: always
    image: willfarrell/autoheal
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  state_manager:
    container_name: 'state-manager'
    env_file:
      - .env
    build:
      context: ./state-manager
      dockerfile: Dockerfile
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - rabbitmq
      - redis
    networks:
      - backend
      - redis
    volumes:
      - ./cache:/var/www/state-manager/cache
      - ./cache:/var/www/state-manager/src/services/cache
      - ./cache:/var/www/cache

    restart: unless-stopped

  data_updater:
    container_name: 'data-updater'
    env_file:
      - .env
    build:
      context: ./data_updater
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - rabbitmq
    networks:
      - backend
    restart: unless-stopped


  round_infos_updater:
    container_name: 'round-infos-updater'
    env_file:
      - .env
    build:
      context: ./round-infos-updater
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - rabbitmq
    networks:
      - backend
      - redis
    restart: unless-stopped

  reduce_prover:
    container_name: 'reduce_prover'
    env_file:
      - .env
    build:
      context: ./reduce-prover
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - rabbitmq
    networks:
      - backend
      - redis
    restart: unless-stopped

  result_producer:
    container_name: 'result_producer'
    env_file:
      - .env
    build:
      context: ./result-producer
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - rabbitmq
    networks:
      - backend
      - redis
    restart: unless-stopped

  api_server:
    env_file:
      .env
    build: .

    environment:
      TZ: Europe/Moscow

    command: sh -c "pnpm start"
    ports:
      - "5100:3040"
    restart: unless-stopped

    healthcheck:
      test: wget -S -O- http://api_server:3040/claim-api/health || exit 1
      interval: 5m
      timeout: 5m
      retries: 3

  rabbitmq:
    image: rabbitmq:3-management
    hostname: "rabbit"
    volumes:
      - ./rabbit_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - backend
    restart: unless-stopped

  kafka:
    image: apache/kafka:latest
    container_name: broker
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3


  redis:
    image: redis:6.2-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
      - ./redis.conf:/redis.conf

    command: redis-server /redis.conf --requirepass ${REDIS_PASSWORD}

    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]

    networks:
      - redis

networks:
  backend:
    driver: bridge
  redis:
    driver: bridge


volumes:
  pg_data:
    driver: local
  rabbit_data:
    driver: local
